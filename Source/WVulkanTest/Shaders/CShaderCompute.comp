#version 450
 
struct Particle {
    vec2 Position;
    vec2 Velocity;
    vec4 Color;
};

layout (binding=0) uniform ParameterUBO {
    float DeltaTime;
} ubo;

layout (std140, binding = 1) readonly buffer ParticleSSBOIn {
    Particle ParticlesIn[];
};

layout (std140, binding = 2) buffer ParticleSSBOOut {
    Particle ParticlesOut[];
};

layout (local_size_x =  256, local_size_y = 1, local_size_x = 1) in;

void main()
{
    uint Index = gl_GlobalInvocationID.x;
    
    Particle ParticleIn = ParticlesIn[Index];

    ParticlesOut[Index].Position = ParticleIn.Position + ParticleIn.Velocity.xy * ubo.DeltaTime;
    ParticlesOut[Index].Velocity = ParticleIn.Velocity;

    // Flip movement at window border
    if ((ParticlesOut[Index].Position.x <= -1.f) || (ParticlesOut[Index].Position.x >= 1.f))
    {
        ParticlesOut[Index].Velocity.x = -ParticlesOut[Index].Velocity.x;
    }
    if ((ParticlesOut[Index].Position.y <= -1.f) || (ParticlesOut[Index].Position.y) >= 1.f)
    {
        ParticlesOut[Index].Velocity.y = -ParticlesOut[Index].Velocity.y;
    }
}

